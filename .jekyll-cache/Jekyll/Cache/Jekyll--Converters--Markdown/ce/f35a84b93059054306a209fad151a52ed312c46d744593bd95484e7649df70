I"`<h2 id="houseplant-2020">HousePlant 2020</h2>

<p><img src="https://houseplant.riceteacatpanda.wtf/img/logo.png" alt="hp logo" /></p>

<p><a href="https://houseplant.riceteacatpanda.wtf/home">Houseplant</a> was an awesome CTF I participated in with my team Pwnzorz this weekend. I will be providing writeups for the <code class="highlighter-rouge">Selfhost all the things</code>, <code class="highlighter-rouge">Catography</code> and <code class="highlighter-rouge">Satanic Jigsaw</code> challenge.</p>

<p>Here they are sorted by order of difficulty (in my opinion):</p>

<h2 id="selhost-all-the-things">Selhost all the things</h2>

<p>Now I am starting with this one because the solution in itself was simple, but the way the challenge was constructed deceived me into taking much longer than I should have:</p>

<p><img src="/assets/images/selhost-all.png" alt="challenge-1" /></p>

<p>So this challenge consisted of a login portal that used the discord api to login (see below) and then a chat interface.</p>

<p><img src="/assets/images/selfhost-all2.png" alt="chall1-2" /></p>

<p>So after fiddling a bit with the chat, I noticed it was vulnerable to XSS, and then I tried many different hacky ways to attempt to find the flag. After lots of time lots looking at this red herring. I decided to focus on the login page (above). It consisted of a checkbox html input like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">name=</span><span class="s">"with"</span> <span class="na">value=</span><span class="s">"discord"</span> <span class="na">id=</span><span class="s">"p-discord"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"p-discord"</span><span class="nt">&gt;</span>discord<span class="nt">&lt;/label&gt;</span>
</code></pre></div></div>

<p>Based on the hint (<code class="highlighter-rouge">discord, more like flag</code>), I decided to change the value of the input to <code class="highlighter-rouge">flag</code>:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"radio"</span> <span class="na">name=</span><span class="s">"with"</span> <span class="na">value=</span><span class="s">"flag"</span> <span class="na">id=</span><span class="s">"p-discord"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"p-discord"</span><span class="nt">&gt;</span>discord<span class="nt">&lt;/label&gt;</span>
</code></pre></div></div>

<p>This worked and once i logged in I got the flag!</p>

<p>I really did kick myself once I saw how simple this time-consuming challenge was.</p>

<h2 id="satanic-jigsaw">Satanic Jigsaw</h2>

<p><img src="/assets/images/satanic-jigsaw.png" alt="chall2-1" /></p>

<p>This <code class="highlighter-rouge">.7z</code> archive consisted of <code class="highlighter-rouge">90000</code>! different <code class="highlighter-rouge">.jpg</code> files with long integer names. With the hint( <code class="highlighter-rouge">long_to_bytes</code>), I had the idea of trying to change the names of all 90000 images from <code class="highlighter-rouge">longs</code> (large numbers) to bytes one by one with a python script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>
<span class="c1"># listdir gets all files in directory
</span><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">"/home/uzay/Downloads/tmp/chall"</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">".jpg"</span><span class="p">):</span>
    <span class="c1"># converts filename without extension to bytes
</span>    <span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">"."</span><span class="p">)[</span><span class="mi">0</span><span class="p">])))</span>
</code></pre></div></div>

<p>I noticed after the program, each image consisted of 2 numbers like coordinates for example: <code class="highlighter-rouge">61 125</code>. All these images were very small, and with the name of the problem I guessed they were each one pixel that formed an image which would give me a flag. I then used the python <code class="highlighter-rouge">Pillow</code> library to assemble all the images together:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="n">max_width</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">max_height</span> <span class="o">=</span> <span class="mi">0</span>
<span class="c1"># calculate max_width and height of pixel coordinates
</span><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">"/home/uzay/Downloads/tmp/chall"</span><span class="p">):</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'py'</span><span class="p">):</span>
    <span class="n">max_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_width</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">max_height</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_height</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">1</span><span class="p">]))</span>

<span class="c1"># initialize new image
</span><span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s">'RGB'</span><span class="p">,</span> <span class="p">(</span><span class="n">max_width</span><span class="p">,</span> <span class="n">max_height</span><span class="p">))</span>
<span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="s">"/home/uzay/Downloads/tmp/chall"</span><span class="p">):</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'py'</span><span class="p">):</span>
    <span class="c1"># paste the pixel at the right x and y coordinates that are stored in the filename
</span>    <span class="n">img</span><span class="o">.</span><span class="n">paste</span><span class="p">(</span><span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">),</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">filename</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">1</span><span class="p">])))</span>
<span class="n">img</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">"result.jpg"</span><span class="p">)</span>
</code></pre></div></div>

<p>This was the resulting image:</p>

<p><img src="https://media.discordapp.net/attachments/701353842846990346/703640070510608384/result.jpg" alt="result" /></p>

<p>All I had to do then was scan the QRs to get the flag.</p>

<h2 id="catography"><a href="http://challs.houseplant.riceteacatpanda.wtf:30003">Catography</a></h2>

<p>Now this one was devilish. Figuring it out was not too difficult but implementing the solution took me quite some time.</p>

<p><img src="/assets/images/catography.png" alt="" /></p>

<p>So the website consisted of this seemingly endless stream of cat images pulled from unsplash.  I beautified the minified js on the webpage and realised they were repeatedly pulling cat images from a local endpoint:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">/api?page=</span><span class="dl">"</span> <span class="o">+</span> <span class="o">++</span><span class="nx">n</span><span class="p">),</span>
                <span class="nx">t</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">e</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</code></pre></div></div>

<p>So my <a href="https://aadibajpai.com">teammate Aadi</a> started looking at the images and noticed similar coordinates in the exif data for every image. We realised that we needed to gather all the cat images and put them on a map to decode the flag.</p>

<p>I started off by gathering all the images together with a simple ruby script and the api:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>
<span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'out.txt'</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">)</span>
<span class="c1"># call api 500 times to get images (500 ~= number of cat datasets)</span>
<span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">500</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
    <span class="n">l</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="no">RestClient</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">"http://challs.houseplant.riceteacatpanda.wtf:30002/api?page=</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span><span class="p">))</span>
    <span class="c1"># for each image in the api call store their url in text file</span>
    <span class="n">l</span><span class="p">[</span><span class="s2">"data"</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">image</span><span class="o">|</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s2">"http://challs.houseplant.riceteacatpanda.wtf:30002/images/</span><span class="si">#{</span><span class="n">image</span><span class="p">[</span><span class="s2">"id"</span><span class="p">]</span><span class="si">}</span><span class="s2">.jpg</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With this information, I then wrote a bash script to store all the exif data by downloading the images using <code class="highlighter-rouge">curl</code> and then exiftool for the gps coords:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do</span>
<span class="c"># send curl data to exif tool and then store only the relevant gps position data</span>
<span class="c"># thanks to my teammate Nils for tips on how to process the input :)</span>
<span class="nb">echo</span> <span class="si">$(</span>exiftool &lt;<span class="o">(</span>curl <span class="nt">--silent</span> <span class="nv">$line</span><span class="o">)</span> | <span class="nb">tail</span> <span class="nt">-n</span> 1 | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s1">':'</span> <span class="nt">-f2</span> | <span class="nb">tail</span> <span class="nt">-c</span> +2<span class="si">)</span><span class="s1">$'</span><span class="se">\r</span><span class="s1">'</span> <span class="o">&gt;&gt;</span> exif.txt
<span class="k">done</span> &lt; out.txt
</code></pre></div></div>

<p>Now that we had the coordinates, I had to put them on a map to view the result. I decided to use <a href="https://leafletjs.com/">LeafletJs</a> to do this.</p>

<p>So the latitude longitude data of the images was stored in this format in exif: <code class="highlighter-rouge">X deg Y' Z" lat, X deg Y' Z" long</code> with Y being minutes and Z being seconds.</p>

<p>So this was the html skeleton to display the map:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;style&gt;</span> <span class="nf">#map</span> <span class="p">{</span> <span class="nl">height</span><span class="p">:</span> <span class="m">700px</span><span class="p">;</span> <span class="nl">width</span><span class="p">:</span> <span class="m">1400px</span><span class="p">;}</span><span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"</span>
    <span class="na">integrity=</span><span class="s">"sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="</span>
    <span class="na">crossorigin=</span><span class="s">""</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"map"</span><span class="nt">&gt;</span>
  
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"</span> <span class="na">integrity=</span><span class="s">"sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="</span> <span class="na">crossorigin=</span><span class="s">""</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>

</code></pre></div></div>

<p>Now me and my teammate <a href="https://diogos.cf">diogo</a> had to parse the latitudes and longitudes of each image in js (the <code class="highlighter-rouge">text</code> variable is all the unparsed lat / long data):</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// load map</span>
<span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">L</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="dl">'</span><span class="s1">map</span><span class="dl">'</span><span class="p">).</span><span class="nx">setView</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span>
<span class="nx">L</span><span class="p">.</span><span class="nx">tileLayer</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</span><span class="dl">'</span><span class="p">).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">parsed</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">item</span> <span class="o">!=</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// split unparsed latitude and longitude</span>
    <span class="kd">let</span> <span class="nx">lat_s</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">long_s</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span>
    <span class="c1">// keep in mind the format (X deg Y' Z" lat,) we split everything at " " and then we need to send the degrees, minutes, seconds and cardinal which we extract below</span>
    <span class="kd">let</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">ConvertDMSToDD</span><span class="p">(</span><span class="nx">lat_s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">lat_s</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">),</span> <span class="nx">lat_s</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span> <span class="dl">""</span><span class="p">),</span> <span class="nx">lat_s</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
    <span class="kd">let</span> <span class="nx">long</span> <span class="o">=</span> <span class="nx">ConvertDMSToDD</span><span class="p">(</span><span class="nx">long_s</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">long_s</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">,</span> <span class="dl">""</span><span class="p">),</span> <span class="nx">long_s</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span> <span class="dl">""</span><span class="p">),</span> <span class="nx">lat_s</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
    <span class="c1">// add extracted coords to map</span>
    <span class="nx">L</span><span class="p">.</span><span class="nx">marker</span><span class="p">([</span><span class="nx">lat</span><span class="p">,</span> <span class="nx">long</span><span class="p">]).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">map</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="c1">// function to calculate lat and long from degrees / minutes / seconds / cardinal</span>
<span class="kd">function</span> <span class="nx">ConvertDMSToDD</span><span class="p">(</span><span class="nx">degrees</span><span class="p">,</span> <span class="nx">minutes</span><span class="p">,</span> <span class="nx">seconds</span><span class="p">,</span> <span class="nx">cardinal</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">dd</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">degrees</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">minutes</span><span class="p">)</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">seconds</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cardinal</span> <span class="o">==</span>  <span class="dl">"</span><span class="s2">W</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">cardinal</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">S</span><span class="dl">"</span><span class="p">)</span> <span class="nx">dd</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">return</span> <span class="nx">dd</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We got some weird garbled text after this code:</p>

<p><img src="/assets/images/catography2.png" alt="" /></p>

<p>We noticed some sort of shift in the longitude at the middle so me and diogo deduced that there must be two different strings spelled out on top of each other.</p>

<p>The first half of coordinates spelled the first half of the flag backwords (<code class="highlighter-rouge">rtcp{}</code>) format:</p>

<p><img src="/assets/images/catography3.png" alt="" /></p>

<p>And then the other half gave us the end:</p>

<p><img src="/assets/images/catography4.png" alt="" /></p>

<p>This was a SUPER fun and satisfying challenge and the whole ctf in general was awesome. Our team tied first!!!</p>

<p>Comment down below if you had other strategies to complete the challenges :)</p>

:ET